#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE    0
#define LOWER   1
#define RAISE   2
#define ADJUST  3

/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                adjust_layer {
                        if-layers = <LOWER RAISE>;
                        then-layer = <ADJUST>;
                };
                
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// ----------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   |  ,  |  .  |  /  | ALT  |
//                    | GUI | LWR | SPC |     | ENT | RSE  | ESC |
                        bindings = <
   &kp TAB    &kp Q  &kp W  &kp E     &kp R      &kp T        &kp Y   &kp U      &kp I      &kp O    &kp P     &kp BSPC
   &kp LCTRL  &kp A  &kp S  &kp D     &kp F      &kp G        &kp H   &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
   &kp LSHFT  &kp Z  &kp X  &kp C     &kp V      &kp B        &kp N   &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp LALT
                            &kp LGUI  &mo LOWER  &kp SPACE    &kp RET &mo RAISE  &kp ESC
                        >;
                };

                lower_layer {
// --------------------------------------------------------------------------------
// |     |  !  |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  | DEL |
// |     |     |  `  |  ~  |  _  |  -  |     |  +  |  =  |  \  |  |  |  :  |  "  |
// |     |     |     |     |  {  |  }  |     |  [  |  ]  |  <  |  >  |  ?  |     |
//                   |     |     |     |     |     |     |     |
                        bindings = <
   &trans  &kp EXCL &kp AT     &kp HASH   &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR   &kp DEL
   &trans  &trans   &kp GRAVE  &kp TILDE  &kp UNDER  &kp MINUS    &kp PLUS   &kp EQUAL  &kp BSLH   &kp PIPE  &kp COLON  &kp DQT
   &trans  &trans   &trans     &trans     &kp LBRC   &kp RBRC     &kp LBKT   &kp RBKT   &kp LT     &kp GT    &kp QMARK  &trans 
                            &trans     &trans     &trans       &trans     &trans     &trans
                        >;
                };

                raise_layer {
// ---------------------------------------------------------------------------------
// |     |  1  |  2  |  3  |  4  |  5  |     |  6  |  7  |  8  |  9  |  0  | DEL |
// |     |     |     |     |     | CPS |     | LFT | DWN | UP  | RGT |     |     |
// |     |     |     |     |     |     |     |     |     |     |     |     |     |
//                   |     |     |     |     |     |     |     |
                        bindings = <
   &trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5      &kp N6   &kp N7    &kp N8  &kp N9     &kp N0  &kp DEL
   &trans  &trans  &trans  &trans  &trans  &kp CAPS    &kp LEFT &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
   &trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans    &trans  &trans     &trans  &trans
                           &trans  &trans  &trans      &trans   &trans    &trans
                        >;
                };

                adjust_layer {
// ----------------------------------------------------------------------------------
// | F12 | F1  | F2  | F3  | F4  | F5  |     | F6  | F7   | F8  | F9   | F10 | F11 |
// | BTC | BT0 | BT1 | BT2 | BT3 | BT4 |     |     | VOL+ | MUT | VOL- |     |     |
// |     |     |     |     |     |     |     |     |      |     |      |     |     |
//                   |     |     |     |     |     |      |     |
                        bindings = <
   &kp F12    &kp F1       &kp F2       &kp F3       &kp F4        &kp F5          &kp F6  &kp F7        &kp F8      &kp F9        &kp F10  &kp F11
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp C_VOL_UP  &kp C_MUTE  &kp C_VOL_DN  &trans   &trans 
   &trans     &trans       &trans       &trans       &trans        &trans          &trans  &trans        &trans      &trans        &trans   &trans 
                                        &trans       &trans        &trans          &trans  &trans        &trans 
                        >;
                };
        };
};

